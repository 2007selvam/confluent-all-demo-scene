buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.14"
  }
}

plugins {
  id 'org.springframework.boot' version '2.4.2'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'idea'

  id "com.google.protobuf" version "0.8.14"
}

group = 'io.confluent.developer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
  maven {
    url 'https://repo.spring.io/milestone'
    }
  maven {
    url "https://packages.confluent.io/maven"
  }
}

ext {
  set('springCloudVersion', "2020.0.0")
}

dependencies {

  implementation "com.google.protobuf:protobuf-java:3.14.0"

  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.apache.kafka:kafka-streams'
  implementation 'org.springframework.cloud:spring-cloud-stream'
  implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
  implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
  implementation 'org.springframework.kafka:spring-kafka'
  implementation "io.confluent:kafka-streams-protobuf-serde:6.0.1"
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'org.springframework.kafka:spring-kafka-test'
  // TopologyTestDriver
  testImplementation "org.apache.kafka:kafka-streams-test-utils"
  // Test data
  implementation "com.github.javafaker:javafaker:1.0.2"
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

protobuf {
  generatedFilesBaseDir = "$buildDir/generated-main-proto-java/"

  protoc {
    artifact = "com.google.protobuf:protoc:3.14.0"
  }

}

clean {
  delete protobuf.generatedFilesBaseDir
}

idea {
  module {
    sourceDirs += file("${buildDir}/generated-main-proto-java/")
  }
}

test {
  useJUnitPlatform()

  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}